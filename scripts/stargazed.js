import fs from "node:fs";
import dotenv from "dotenv";
import { Octokit } from "@octokit/rest";
import { Command } from "commander";

dotenv.config();

const program = new Command();

program
  .option(
    "-u, --username <username>",
    "GitHub username",
    process.env.GITHUB_USERNAME,
  )
  .option("-t, --token <token>", "GitHub token", process.env.GITHUB_TOKEN)
  .option("-m, --message <message>", "Commit message", "Update starred repos")
  .parse();

const { username, token, message } = program.opts();

if (message) {
  console.log(`üìù Using commit message template: ${message}`);
}

if (!username || !token) {
  console.error(
    "‚ö†Ô∏è Missing required environment variables (GITHUB_USERNAME or GITHUB_TOKEN).",
  );
  process.exit(1);
}

const octokit = new Octokit({ auth: token });

async function getStarredRepos(username) {
  const repos = [];
  let page = 1;

  while (true) {
    const { data } = await octokit.activity.listReposStarredByUser({
      username,
      per_page: 100,
      page,
    });
    if (data.length === 0) break;
    repos.push(...data);
    page++;
  }

  return repos;
}

async function generate() {
  try {
    console.log(`üîç Fetching starred repositories for ${username}...`);
    const starredRepos = await getStarredRepos(username);

    const outputJsonData = starredRepos.map((repo) => ({
      name: repo.name || "Unknown Repo",
      description: repo.description || "No description",
      author: repo.owner?.login || "Unknown Author",
      stars: repo.stargazers_count || 0,
      url: repo.html_url || "#",
      date: new Date(repo.created_at || Date.now()).toLocaleDateString(),
      languages: repo.language ? [{ language: repo.language }] : [],
      topics: repo.topics || [],
      license: repo.license?.spdx_id || "None",
      forks: repo.forks_count || 0,
      open_issues: repo.open_issues_count || 0,
      last_updated: new Date(repo.pushed_at || Date.now()).toLocaleDateString(),
    }));

    fs.writeFileSync("data.json", JSON.stringify(outputJsonData, null, 2));

    const readmeContent = `
# My GitHub Stars

Last updated: ${new Date().toLocaleDateString()}

Automatically generated by [stargazed](https://github.com/KBLLR/git-stars).
`;

    fs.writeFileSync("README.md", readmeContent);

    console.log("‚úÖ README.md and data.json generated successfully!");
  } catch (error) {
    console.error("‚ö†Ô∏è Error:", error);
  }
}

generate();
